name: Terraform AWS Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose your environment'
        required: true
        default: 'production'
        type: choice
        options:
          - prod
          - stag
          - dev
      terraform_action:
        description: 'Select Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
          - init
          - plan
          - apply
          - destroy

jobs:
  terraform:
    name: Terraform Setup and Apply
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.4.0'

    # Configure AWS credentials
    - name: AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    # Check and create state bucket if it doesn't exist
    - name: Check and create state bucket
      run: |
        if ! aws s3api head-bucket --bucket ind-tfstate-bucket 2>/dev/null; then
          echo "Creating Terraform state bucket..."
          cd setup
          terraform init
          terraform apply -auto-approve
          cd ..
          
          # Copy backend template to backend.tf
          cp backend.tf.tmpl backend.tf
        else
          echo "Terraform state bucket already exists"
          # Copy backend template to backend.tf if it doesn't exist
          if [ ! -f backend.tf ]; then
            cp backend.tf.tmpl backend.tf
          fi
        fi

    # Handle state issues
    - name: Handle state issues
      run: |
        chmod +x reset-backend.sh
        ./reset-backend.sh ${{ github.event.inputs.environment }}
        ENV="${{ github.event.inputs.environment }}"
        
        # Delete state files in S3
        aws s3 rm s3://ind-tfstate-bucket/terraform/$ENV/terraform.tfstate || true
        
        # Clean up DynamoDB state lock
        if aws dynamodb describe-table --table-name ind-tfstate-lock 2>/dev/null; then
          echo "Cleaning DynamoDB table"
          aws dynamodb scan --table-name ind-tfstate-lock --attributes-to-get LockID --query 'Items[*].LockID.S' --output text | while read lockid; do
            aws dynamodb delete-item --table-name ind-tfstate-lock --key "{\"LockID\":{\"S\":\"$lockid\"}}" || true
          done
        fi

    # Force unlock state if needed
    - name: Force unlock state
      run: |
        ENV="${{ github.event.inputs.environment }}"
        echo "Attempting to force unlock state for environment: $ENV"
        
        # Force unlock in DynamoDB
        if aws dynamodb describe-table --table-name ind-tfstate-lock 2>/dev/null; then
          LOCK_IDS=$(aws dynamodb scan --table-name ind-tfstate-lock --attributes-to-get LockID --query 'Items[*].LockID.S' --output text 2>/dev/null)
          if [ -n "$LOCK_IDS" ]; then
            for LOCK_ID in $LOCK_IDS; do
              terraform force-unlock -force "$LOCK_ID" || true
            done
          else
            echo "No locks found in DynamoDB table"
          fi
        else
          echo "DynamoDB lock table does not exist yet"
        fi

        # Also try S3 direct unlock
        aws s3api put-object --bucket ind-tfstate-bucket --key terraform/$ENV/terraform.tfstate.lock --body /dev/null || true

    # Set Environment and Action Variables
    - name: Set Environment and Action Variables
      run: |
        ENV="${{ github.event.inputs.environment || 'dev' }}"
        ACTION="${{ github.event.inputs.terraform_action || 'plan' }}"
        
        echo "Environment: $ENV"
        echo "Terraform Action: $ACTION"
        
        # Set environment variables for later steps
        echo "TF_ENV=$ENV" >> $GITHUB_ENV
        echo "TF_ACTION=$ACTION" >> $GITHUB_ENV
        
        if [[ "$ENV" != "dev" && "$ENV" != "stag" && "$ENV" != "prod" ]]; then
          echo "Error: Environment must be one of: dev, stag, prod"
          exit 1
        fi

    # Terraform Init (if selected)
    - name: Terraform Init
      if: ${{ env.TF_ACTION == 'init' }}
      run: |
        rm -f terraform.tfstate*
        rm -f .terraform.lock.hcl
        rm -rf .terraform
        rm -f backend.tf
        cat > backend.tf << EOF
        terraform {
          backend "local" {}
        }
        EOF
        cd main_module
        terraform init

    # Terraform Plan (if selected)
    - name: Terraform Plan
      if: ${{ env.TF_ACTION == 'plan' }}
      run: |
        rm -f terraform.tfstate*
        rm -f .terraform.lock.hcl
        rm -rf .terraform
        rm -f backend.tf
        cat > backend.tf << EOF
        terraform {
          backend "local" {}
        }
        EOF
        cd main_module
        terraform init
        terraform plan -var-file=../environments/${TF_ENV}.tfvars -no-color

    # Terraform Apply (if selected)
    - name: Terraform Apply
      if: ${{ env.TF_ACTION == 'apply' }}
      run: |
        # Empty S3 buckets before operations
        echo "Emptying S3 buckets for ${TF_ENV} environment"
        aws s3 rm s3://ind-${TF_ENV}-${TF_ENV}-data-test-1 --recursive || true
        aws s3api delete-objects --bucket ind-${TF_ENV}-${TF_ENV}-data-test-1 --delete "$(aws s3api list-object-versions --bucket ind-${TF_ENV}-${TF_ENV}-data-test-1 --query '{Objects: Versions[].{Key: Key, VersionId: VersionId}}' --output json)" || true
        aws s3api delete-objects --bucket ind-${TF_ENV}-${TF_ENV}-data-test-1 --delete "$(aws s3api list-object-versions --bucket ind-${TF_ENV}-${TF_ENV}-data-test-1 --query '{Objects: DeleteMarkers[].{Key: Key, VersionId: VersionId}}' --output json)" || true
        
        rm -f terraform.tfstate*
        rm -f .terraform.lock.hcl
        rm -rf .terraform
        rm -f backend.tf
        cat > backend.tf << EOF
        terraform {
          backend "local" {}
        }
        EOF
        cd main_module
        terraform init
        
        # Import existing resources if needed
        if [ "${TF_ENV}" == "prod" ]; then
          aws iam get-role --role-name environment-prod-role >/dev/null 2>&1 && \
          terraform import -var-file=../environments/prod.tfvars aws_iam_role.environment_role environment-prod-role || true
        elif [ "${TF_ENV}" == "dev" ]; then
          aws iam get-role --role-name environment-dev-role >/dev/null 2>&1 && \
          terraform import -var-file=../environments/dev.tfvars aws_iam_role.environment_role environment-dev-role || true
        elif [ "${TF_ENV}" == "stag" ]; then
          aws iam get-role --role-name environment-stag-role >/dev/null 2>&1 && \
          terraform import -var-file=../environments/stag.tfvars aws_iam_role.environment_role environment-stag-role || true
        fi
        
        terraform apply -var-file=../environments/${TF_ENV}.tfvars -auto-approve

    # Terraform Destroy (if selected)
    - name: Terraform Destroy
      if: ${{ env.TF_ACTION == 'destroy' }}
      run: |
        # First, clear the S3 bucket for current environment
        aws s3 rm s3://ind-${TF_ENV}-${TF_ENV}-data-test-1 --recursive || true
        aws s3api delete-objects --bucket ind-${TF_ENV}-${TF_ENV}-data-test-1 --delete "$(aws s3api list-object-versions --bucket ind-${TF_ENV}-${TF_ENV}-data-test-1 --query '{Objects: Versions[].{Key: Key, VersionId: VersionId}}' --output json)" || true
        aws s3api delete-objects --bucket ind-${TF_ENV}-${TF_ENV}-data-test-1 --delete "$(aws s3api list-object-versions --bucket ind-${TF_ENV}-${TF_ENV}-data-test-1 --query '{Objects: DeleteMarkers[].{Key: Key, VersionId: VersionId}}' --output json)" || true

        rm -f terraform.tfstate*
        rm -f .terraform.lock.hcl
        rm -rf .terraform
        rm -f backend.tf
        
        cat > backend.tf << EOF
        terraform {
          backend "local" {}
        }
        EOF
        
        cd main_module
        terraform init
        terraform destroy -var-file=../environments/${TF_ENV}.tfvars -auto-approve
